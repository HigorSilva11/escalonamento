import java.text.DecimalFormat ;
import java.util.ArrayList;
import java.util.Scanner;

public class Round_Robin {
	
	public static void main(String[] args ){
		Scanner var = new Scanner(System.in);
		
		int quantum, N1 , entrada , tempoAtual, execucao, q , temposFinais[], quantidadedeProcessos,burstNovo, tempoExecucao[];
		ArrayList chegada, burst, processos , cpchegada, cpburst;
		String ordem;
		double tempoMedioExecucao, tempoMedioEspera , turnaround;
		int contTeste=0;
		String formato, saida;
		DecimalFormat decimal = new DecimalFormat("0.00");
		
		System.out.println("Quantos pocessadores deseja armazenar? ");
		N = var.nextInt();
		
		System.out.println("Qual valor de quantm? ");
		quantum = var.nextInt();
		
		while (N!=0){
			contTeste++;
			processos = new ArrayList();
			chegada = new ArrayList();
			burst = new ArrayList();
			ordem ="";
			quantidadedeProcessos = N;
			temposFinais = new int [N];
			tempoExecucao = new int[N];
			
			
			for (int i=0; i<N1 ; i++)	{
				System.out.println("Qual o tempo de chegada do P"+(i+1));
				entrada = var.nextInt();
				chegada.add(entrada);
				System.out.println("Qual o burst do P"+(i+1));
				entrada = var.nextInt();
				burst.add(entrada);
						
			}
			
			cpchegada = (ArrayList) chegada.clone();
			cpburst = (ArrayList)	burst.clone();
			tempoAtual = (int)	chegada.get(0);
			processos = new ArrayList();
			processos = new ArrayList();
			
			while (quantidadedeProcessos > 0){
				for(int i =0; i<N1 ; i++){
					if((int) chegada.get(i) != -1 && (int) chegada.get(i) <=tempoAtual){
						processos.add(i);
						chegada.set(i, -1);
						
						
					}
				}
				
				if (processos.isEmpty())  {
					tempoAtual++;
					
				}else{
					execucao = (int) processos.remove(0);
					ordem += "p" + (execucao + 1) + " ";
					q = quantum;
					
					while(q > 0 && (int) burst.get(execucao)>0){
						tempoAtual ++;
						q--;
						burstNovo = (int) burst.get(execucao) -1;
						burst.set(execucao, burstNovo);
						
					}
					
					if ((int) burst.get(execucao)> 0){
						for (int i = 0 ; i < N1 ; i ++){
							if ((int) chegada.get(i) != -1  && (int) chegada.get(i) <= tempoAtual){
							processos.add(i);
							chegada.set(i, -1);
						}
					}
						
						processos.add(execucao);
				}else{
					temposFinais[execucao] = tempoAtual;
					quantidadedeProcessos --;
				}
				
			}
			
			
		}
			tempoMedioExecucao = 0;
			tempoMedioEspera = 0;
			for ( int i=0 ; i<N1; i++){
				tempoExecucao[i] = temposFinais[i]- (int) cpchegada.get(i);
				tempoMedioExecucao +=tempoExecucao[i];
				tempoMedioEspera += tempoExecucao[i] - (int) cpburst.get(i);
			}
			
			tempoMedioExecucao = tempoMedioExecucao /N1;
			tempoMedioEspera = tempoMedioEspera/N1;
			System.out.println("PROCESSAMENTO - PART" +contTeste);
			
			for (int i  = 0; i<N1 ; i++){
				turnaround = (int)temposFinais[i] - (int) cpchegada.get(i);
				formato = decimal.format(turnaround);
				saida = "|turnaround|	P" +i + ": "+ formato + "ms";
				saida = saida.replace(".", ",");
				System.out.println(saida);
				
	}
			
			
			formato = decimal.format(tempoMedioExecucao);
			saida = "tempo medio de execução: "+formato+"s";
			saida  = saida.replace(".", ",");
			System.out.println(saida);
			
			formato = decimal.format (tempoMedioEspera);
			saida = "Tempo medio de espera:	"+formato+"s";
			saida = saida.replace(".", ",");
			System.out.println(saida);
			
			System.out.println(ordem);
			System.out.println();
			System.out.println("Deseja Armazenar qauntos processos? ");
			N = var.nextInt();

		}
	}
}
